--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[0] = {}
Queue.Reliable[0] = table.create(256)
Events.Reliable[1] = {}
Queue.Reliable[1] = table.create(256)
Events.Reliable[2] = {}
Queue.Reliable[2] = table.create(256)
Events.Reliable[3] = {}
Queue.Reliable[3] = table.create(256)
Events.Reliable[5] = {}
Queue.Reliable[5] = table.create(256)
Events.Reliable[6] = {}
Queue.Reliable[6] = table.create(256)
Events.Reliable[7] = {}
Queue.Reliable[7] = table.create(256)
Events.Reliable[8] = {}
Queue.Reliable[8] = table.create(256)
export type Shatterbox_Puppet = { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number }
export type Shatterbox_PartInstance = { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number }
export type Shatterbox_DestructionParamsType = { Shape: number, CFrame: CFrame, Size: Vector3, OverlapFilterType: number?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } }
export type Shatterbox_PuppetState = { GUID: string, CFrame: CFrame }
local function Shatterbox_ReadEVENT_SignalDestruction(): ({ Shape: number, CFrame: CFrame, Size: Vector3, OverlapFilterType: number?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } })
	-- Read BLOCK: 47 bytes
	local BLOCK_START = Read(47)
	local Value = {} :: any
	Value.Shape = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Value.Shape < 0 then error(`Expected "Value.Shape" to be larger than 0, got {Value.Shape} instead.`) end
	if Value.Shape > 4 then error(`Expected "Value.Shape" to be smaller than 4, got {Value.Shape} instead.`) end
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 1)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 5)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 9)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 13)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 17)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 21)
	Value.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 25)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 29)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 33)
	Value.Size = Vector3.new(X, Y, Z)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 37) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value.OverlapFilterType = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Value.OverlapFilterType < 0 then error(`Expected "Value.OverlapFilterType" to be larger than 0, got {Value.OverlapFilterType} instead.`) end
		if Value.OverlapFilterType > 1 then error(`Expected "Value.OverlapFilterType" to be smaller than 1, got {Value.OverlapFilterType} instead.`) end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 38) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.OverlapFilterDescendants = table.create(Length)
		for Index = 1, Length do
			RecieveInstanceCursor += 1
			local Item_2 = RecieveInstances[RecieveInstanceCursor]
			if typeof(Item_2) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_2)} instead.`) end
			if not Item_2:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_2.ClassName}" instead.`) end
			table.insert(Value.OverlapFilterDescendants, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 39) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.GridSize = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 40) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.CleanupDelay = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 41) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value.SkipEncapsulatedVoxels = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	end
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 42)
	Value.ID = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 44) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value.OnVoxelDestruct = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	-- START ARRAY
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 45)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value.DestructParameters = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		table.insert(Value.DestructParameters, Item_1)
	end
	-- END ARRAY
	return Value
end

local function Shatterbox_ReadEVENT_SignalUndo(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function Shatterbox_ReadEVENT_SignalClearQueue(): (nil)
	return nil
end

local function Shatterbox_ReadEVENT_SignalReset(): (nil)
	return nil
end

local function Shatterbox_WriteEVENT_MapReplicationCompleted(Value: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function Shatterbox_ReadEVENT_CreatePuppets(): ({ { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 45 bytes
	local ARRAY_START_1 = Read(45 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		Item_1.GUID = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		-- Read 4
		local OPERATION_OFFSET_7 = ARRAY_START_1
		ARRAY_START_1 += 4
		X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
		-- Read 4
		local OPERATION_OFFSET_8 = ARRAY_START_1
		ARRAY_START_1 += 4
		Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
		-- Read 4
		local OPERATION_OFFSET_9 = ARRAY_START_1
		ARRAY_START_1 += 4
		Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_9)
		Item_1.Size = Vector3.new(X, Y, Z)
		-- Read 1
		local OPERATION_OFFSET_10 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_11 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_12 = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_12))
		-- Read 2
		local OPERATION_OFFSET_13 = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
		if Item_1.Material < 256 then error(`Expected "Item_1.Material" to be larger than 256, got {Item_1.Material} instead.`) end
		if Item_1.Material > 2311 then error(`Expected "Item_1.Material" to be smaller than 2311, got {Item_1.Material} instead.`) end
		-- Read 2
		local OPERATION_OFFSET_14 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_14)
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Item_1.Transparency = -math.huge
			else
				Item_1.Transparency = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Item_1.Transparency = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Item_1.Transparency = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Item_1.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
		end
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

local function Shatterbox_ReadEVENT_ReplicatePuppetStates(): ({ { GUID: string, CFrame: CFrame } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 26 bytes
	local ARRAY_START_1 = Read(26 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		Item_1.GUID = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

local function Shatterbox_ReadEVENT_DestroyPuppet(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function Shatterbox_ReadEVENT_ReplicateMap(): ({ { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 43 bytes
	local ARRAY_START_1 = Read(43 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 4
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		-- Read 4
		local OPERATION_OFFSET_7 = ARRAY_START_1
		ARRAY_START_1 += 4
		Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
		-- Read 4
		local OPERATION_OFFSET_8 = ARRAY_START_1
		ARRAY_START_1 += 4
		Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
		Item_1.Size = Vector3.new(X, Y, Z)
		-- Read 1
		local OPERATION_OFFSET_9 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_10 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_11 = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_9), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11))
		-- Read 2
		local OPERATION_OFFSET_12 = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_12)
		if Item_1.Material < 256 then error(`Expected "Item_1.Material" to be larger than 256, got {Item_1.Material} instead.`) end
		if Item_1.Material > 2311 then error(`Expected "Item_1.Material" to be smaller than 2311, got {Item_1.Material} instead.`) end
		-- Read 2
		local OPERATION_OFFSET_13 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Item_1.Transparency = -math.huge
			else
				Item_1.Transparency = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Item_1.Transparency = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Item_1.Transparency = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Item_1.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
		end
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Shatterbox = {
		SignalDestruction = {
			On = NOOP
		},
		SignalUndo = {
			On = NOOP
		},
		SignalClearQueue = {
			On = NOOP
		},
		SignalReset = {
			On = NOOP
		},
		MapReplicationCompleted = {
			Fire = NOOP
		},
		CreatePuppets = {
			On = NOOP
		},
		ReplicatePuppetStates = {
			On = NOOP
		},
		DestroyPuppet = {
			On = NOOP
		},
		ReplicateMap = {
			On = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Shape: number, CFrame: CFrame, Size: Vector3, OverlapFilterType: number?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } } = Shatterbox_ReadEVENT_SignalDestruction()
			if #Events.Reliable[0] > 0 then
				for _, Listener in Events.Reliable[0] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"SignalDestruction\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: string = Shatterbox_ReadEVENT_SignalUndo()
			if #Events.Reliable[1] > 0 then
				for _, Listener in Events.Reliable[1] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"SignalUndo\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: nil = Shatterbox_ReadEVENT_SignalClearQueue()
			if #Events.Reliable[2] > 0 then
				for _, Listener in Events.Reliable[2] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"SignalClearQueue\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 3 then
			local Value: nil = Shatterbox_ReadEVENT_SignalReset()
			if #Events.Reliable[3] > 0 then
				for _, Listener in Events.Reliable[3] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"SignalReset\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value} :: {any})
			end
		elseif Index == 5 then
			local Value: { { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } } = Shatterbox_ReadEVENT_CreatePuppets()
			if #Events.Reliable[5] > 0 then
				for _, Listener in Events.Reliable[5] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"CreatePuppets\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Value} :: {any})
			end
		elseif Index == 6 then
			local Value: { { GUID: string, CFrame: CFrame } } = Shatterbox_ReadEVENT_ReplicatePuppetStates()
			if #Events.Reliable[6] > 0 then
				for _, Listener in Events.Reliable[6] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"ReplicatePuppetStates\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Value} :: {any})
			end
		elseif Index == 7 then
			local Value: string = Shatterbox_ReadEVENT_DestroyPuppet()
			if #Events.Reliable[7] > 0 then
				for _, Listener in Events.Reliable[7] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[7] > 256 then
					warn("[Blink]: Event queue of \"DestroyPuppet\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[7], {Value} :: {any})
			end
		elseif Index == 8 then
			local Value: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } } = Shatterbox_ReadEVENT_ReplicateMap()
			if #Events.Reliable[8] > 0 then
				for _, Listener in Events.Reliable[8] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[8] > 256 then
					warn("[Blink]: Event queue of \"ReplicateMap\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[8], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Shatterbox = {
		SignalDestruction = {
			On = function(Listener: (Value: { Shape: number, CFrame: CFrame, Size: Vector3, OverlapFilterType: number?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } }) -> ()): () -> ()
				table.insert(Events.Reliable[0], Listener)
				for Index, Arguments in Queue.Reliable[0] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[0], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[0], Index)
					end
				end
			end
		},
		SignalUndo = {
			On = function(Listener: (Value: string) -> ()): () -> ()
				table.insert(Events.Reliable[1], Listener)
				for Index, Arguments in Queue.Reliable[1] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[1] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[1], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[1], Index)
					end
				end
			end
		},
		SignalClearQueue = {
			On = function(Listener: (Value: nil) -> ()): () -> ()
				table.insert(Events.Reliable[2], Listener)
				for Index, Arguments in Queue.Reliable[2] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[2] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[2], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[2], Index)
					end
				end
			end
		},
		SignalReset = {
			On = function(Listener: (Value: nil) -> ()): () -> ()
				table.insert(Events.Reliable[3], Listener)
				for Index, Arguments in Queue.Reliable[3] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[3] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[3], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[3], Index)
					end
				end
			end
		},
		MapReplicationCompleted = {
			Fire = function(Value: string): ()
				Shatterbox_WriteEVENT_MapReplicationCompleted(Value)
			end
		},
		CreatePuppets = {
			On = function(Listener: (Value: { { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } }) -> ()): () -> ()
				table.insert(Events.Reliable[5], Listener)
				for Index, Arguments in Queue.Reliable[5] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[5] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[5], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[5], Index)
					end
				end
			end
		},
		ReplicatePuppetStates = {
			On = function(Listener: (Value: { { GUID: string, CFrame: CFrame } }) -> ()): () -> ()
				table.insert(Events.Reliable[6], Listener)
				for Index, Arguments in Queue.Reliable[6] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[6] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[6], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[6], Index)
					end
				end
			end
		},
		DestroyPuppet = {
			On = function(Listener: (Value: string) -> ()): () -> ()
				table.insert(Events.Reliable[7], Listener)
				for Index, Arguments in Queue.Reliable[7] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[7] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[7], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[7], Index)
					end
				end
			end
		},
		ReplicateMap = {
			On = function(Listener: (Value: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number } }) -> ()): () -> ()
				table.insert(Events.Reliable[8], Listener)
				for Index, Arguments in Queue.Reliable[8] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[8] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[8], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[8], Index)
					end
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL