--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
--#selene: allow(unused_variable)
--#selene: allow(multiple_statements)
--#selene: allow(parenthese_conditions)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[0] = {}
Queue.Reliable[0] = table.create(256)
Events.Reliable[1] = {}
Queue.Reliable[1] = table.create(256)
Events.Reliable[2] = {}
Queue.Reliable[2] = table.create(256)
Events.Reliable[5] = {}
Queue.Reliable[5] = table.create(256)
Events.Reliable[6] = {}
Queue.Reliable[6] = table.create(256)
export type PartType = ("Ball" | "Block" | "Cylinder" | "Wedge" | "CornerWedge")
export type Material = ("Plastic" | "SmoothPlastic" | "Neon" | "Wood" | "WoodPlanks" | "Marble" | "Slate" | "Concrete" | "Granite" | "Brick" | "Pebble" | "Cobblestone" | "Rock" | "Sandstone" | "Basalt" | "CrackedLava" | "Limestone" | "Pavement" | "CorrodedMetal" | "DiamondPlate" | "Foil" | "Metal" | "Grass" | "LeafyGrass" | "Sand" | "Fabric" | "Snow" | "Mud" | "Ground" | "Asphalt" | "Salt" | "Ice" | "Glacier" | "Glass" | "ForceField" | "Air" | "Water" | "Cardboard" | "Carpet" | "CeramicTiles" | "ClayRoofTiles" | "RoofShingles" | "Leather" | "Plaster" | "Rubber")
export type RaycastFilterType = ("Include" | "Exclude")
export type PartInstance = { CFrame: CFrame, Size: Vector3, Material: ("Plastic" | "SmoothPlastic" | "Neon" | "Wood" | "WoodPlanks" | "Marble" | "Slate" | "Concrete" | "Granite" | "Brick" | "Pebble" | "Cobblestone" | "Rock" | "Sandstone" | "Basalt" | "CrackedLava" | "Limestone" | "Pavement" | "CorrodedMetal" | "DiamondPlate" | "Foil" | "Metal" | "Grass" | "LeafyGrass" | "Sand" | "Fabric" | "Snow" | "Mud" | "Ground" | "Asphalt" | "Salt" | "Ice" | "Glacier" | "Glass" | "ForceField" | "Air" | "Water" | "Cardboard" | "Carpet" | "CeramicTiles" | "ClayRoofTiles" | "RoofShingles" | "Leather" | "Plaster" | "Rubber"), Transparency: number }
export type DestructionParamsType = { Shape: ("Ball" | "Block" | "Cylinder" | "Wedge" | "CornerWedge"), CFrame: CFrame, Size: Vector3, OverlapFilterType: ("Include" | "Exclude")?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, finalOpTick: number?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } }
export type VoxStatesArr = {[string]: CFrame}
local function ReadEVENT_SignalDestruction(): ({ Shape: ("Ball" | "Block" | "Cylinder" | "Wedge" | "CornerWedge"), CFrame: CFrame, Size: Vector3, OverlapFilterType: ("Include" | "Exclude")?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, finalOpTick: number?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } })
	-- Read BLOCK: 48 bytes
	local BLOCK_START = Read(48)
	local Value = {} :: any
	Value.Shape = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value.Shape = "Ball"
	elseif Index == 1 then
		Value.Shape = "Block"
	elseif Index == 2 then
		Value.Shape = "Cylinder"
	elseif Index == 3 then
		Value.Shape = "Wedge"
	elseif Index == 4 then
		Value.Shape = "CornerWedge"
	else
		error(`Unexpected enum: {Index}`)
	end
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 1)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 5)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 9)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 13)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 17)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 21)
	Value.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 25)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 29)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 33)
	Value.Size = Vector3.new(X, Y, Z)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 37) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value.OverlapFilterType = true :: any
		Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			Value.OverlapFilterType = "Include"
		elseif Index == 1 then
			Value.OverlapFilterType = "Exclude"
		else
			error(`Unexpected enum: {Index}`)
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 38) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.OverlapFilterDescendants = table.create(Length)
		for Index = 1, Length do
			RecieveInstanceCursor += 1
			local Item_2 = RecieveInstances[RecieveInstanceCursor]
			if typeof(Item_2) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_2)} instead.`) end
			if not Item_2:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_2.ClassName}" instead.`) end
			table.insert(Value.OverlapFilterDescendants, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 39) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.GridSize = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 40) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.CleanupDelay = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 41) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value.SkipEncapsulatedVoxels = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 42) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.finalOpTick = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 43)
	Value.ID = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 45) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value.OnVoxelDestruct = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	-- START ARRAY
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 46)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value.DestructParameters = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		table.insert(Value.DestructParameters, Item_1)
	end
	-- END ARRAY
	return Value
end

local function ReadEVENT_SignalUndo(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function ReadEVENT_SignalClearQueue(): (nil)
	return nil
end

local function WriteEVENT_MapReplicationCompleted(Value: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function WriteEVENT_UndoReplicationCompleted(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
end

local function ReadEVENT_CreatePuppet(): (string, { CFrame: CFrame, Size: Vector3, Material: ("Plastic" | "SmoothPlastic" | "Neon" | "Wood" | "WoodPlanks" | "Marble" | "Slate" | "Concrete" | "Granite" | "Brick" | "Pebble" | "Cobblestone" | "Rock" | "Sandstone" | "Basalt" | "CrackedLava" | "Limestone" | "Pavement" | "CorrodedMetal" | "DiamondPlate" | "Foil" | "Metal" | "Grass" | "LeafyGrass" | "Sand" | "Fabric" | "Snow" | "Mud" | "Ground" | "Asphalt" | "Salt" | "Ice" | "Glacier" | "Glass" | "ForceField" | "Air" | "Water" | "Cardboard" | "Carpet" | "CeramicTiles" | "ClayRoofTiles" | "RoofShingles" | "Leather" | "Plaster" | "Rubber"), Transparency: number })
	-- Read BLOCK: 41 bytes
	local BLOCK_START = Read(41)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	local Value2 = {} :: any
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 2)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 6)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 10)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 14)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 18)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 22)
	Value2.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 26)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 30)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 34)
	Value2.Size = Vector3.new(X, Y, Z)
	Value2.Material = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 38)
	if Index == 0 then
		Value2.Material = "Plastic"
	elseif Index == 1 then
		Value2.Material = "SmoothPlastic"
	elseif Index == 2 then
		Value2.Material = "Neon"
	elseif Index == 3 then
		Value2.Material = "Wood"
	elseif Index == 4 then
		Value2.Material = "WoodPlanks"
	elseif Index == 5 then
		Value2.Material = "Marble"
	elseif Index == 6 then
		Value2.Material = "Slate"
	elseif Index == 7 then
		Value2.Material = "Concrete"
	elseif Index == 8 then
		Value2.Material = "Granite"
	elseif Index == 9 then
		Value2.Material = "Brick"
	elseif Index == 10 then
		Value2.Material = "Pebble"
	elseif Index == 11 then
		Value2.Material = "Cobblestone"
	elseif Index == 12 then
		Value2.Material = "Rock"
	elseif Index == 13 then
		Value2.Material = "Sandstone"
	elseif Index == 14 then
		Value2.Material = "Basalt"
	elseif Index == 15 then
		Value2.Material = "CrackedLava"
	elseif Index == 16 then
		Value2.Material = "Limestone"
	elseif Index == 17 then
		Value2.Material = "Pavement"
	elseif Index == 18 then
		Value2.Material = "CorrodedMetal"
	elseif Index == 19 then
		Value2.Material = "DiamondPlate"
	elseif Index == 20 then
		Value2.Material = "Foil"
	elseif Index == 21 then
		Value2.Material = "Metal"
	elseif Index == 22 then
		Value2.Material = "Grass"
	elseif Index == 23 then
		Value2.Material = "LeafyGrass"
	elseif Index == 24 then
		Value2.Material = "Sand"
	elseif Index == 25 then
		Value2.Material = "Fabric"
	elseif Index == 26 then
		Value2.Material = "Snow"
	elseif Index == 27 then
		Value2.Material = "Mud"
	elseif Index == 28 then
		Value2.Material = "Ground"
	elseif Index == 29 then
		Value2.Material = "Asphalt"
	elseif Index == 30 then
		Value2.Material = "Salt"
	elseif Index == 31 then
		Value2.Material = "Ice"
	elseif Index == 32 then
		Value2.Material = "Glacier"
	elseif Index == 33 then
		Value2.Material = "Glass"
	elseif Index == 34 then
		Value2.Material = "ForceField"
	elseif Index == 35 then
		Value2.Material = "Air"
	elseif Index == 36 then
		Value2.Material = "Water"
	elseif Index == 37 then
		Value2.Material = "Cardboard"
	elseif Index == 38 then
		Value2.Material = "Carpet"
	elseif Index == 39 then
		Value2.Material = "CeramicTiles"
	elseif Index == 40 then
		Value2.Material = "ClayRoofTiles"
	elseif Index == 41 then
		Value2.Material = "RoofShingles"
	elseif Index == 42 then
		Value2.Material = "Leather"
	elseif Index == 43 then
		Value2.Material = "Plaster"
	elseif Index == 44 then
		Value2.Material = "Rubber"
	else
		error(`Unexpected enum: {Index}`)
	end
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 39)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value2.Transparency = -math.huge
		else
			Value2.Transparency = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value2.Transparency = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value2.Transparency = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value2.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value1, Value2
end

local function ReadEVENT_ReplicatePuppetStates(): ({[string]: CFrame})
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Value = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(2)
		local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
		local Key_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		local OFFSET_1 = Read(4)
		local X = buffer.readf32(RecieveBuffer, OFFSET_1)
		local OFFSET_2 = Read(4)
		local Y = buffer.readf32(RecieveBuffer, OFFSET_2)
		local OFFSET_3 = Read(4)
		local Z = buffer.readf32(RecieveBuffer, OFFSET_3)
		local Position = Vector3.new(X, Y, Z)
		local OFFSET_4 = Read(4)
		local rX = buffer.readf32(RecieveBuffer, OFFSET_4)
		local OFFSET_5 = Read(4)
		local rY = buffer.readf32(RecieveBuffer, OFFSET_5)
		local OFFSET_6 = Read(4)
		local rZ = buffer.readf32(RecieveBuffer, OFFSET_6)
		local Element_1 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		Value[Key_1] = Element_1
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	SignalDestruction = {
		On = NOOP
	},
	SignalUndo = {
		On = NOOP
	},
	SignalClearQueue = {
		On = NOOP
	},
	MapReplicationCompleted = {
		Fire = NOOP
	},
	UndoReplicationCompleted = {
		Fire = NOOP
	},
	CreatePuppet = {
		On = NOOP
	},
	ReplicatePuppetStates = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Shape: ("Ball" | "Block" | "Cylinder" | "Wedge" | "CornerWedge"), CFrame: CFrame, Size: Vector3, OverlapFilterType: ("Include" | "Exclude")?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, finalOpTick: number?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } } = ReadEVENT_SignalDestruction()
			if #Events.Reliable[0] > 0 then
				for _, Listener in Events.Reliable[0] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"SignalDestruction\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: string = ReadEVENT_SignalUndo()
			if #Events.Reliable[1] > 0 then
				for _, Listener in Events.Reliable[1] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"SignalUndo\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: nil = ReadEVENT_SignalClearQueue()
			if #Events.Reliable[2] > 0 then
				for _, Listener in Events.Reliable[2] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"SignalClearQueue\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 5 then
			local Value1: string, Value2: { CFrame: CFrame, Size: Vector3, Material: ("Plastic" | "SmoothPlastic" | "Neon" | "Wood" | "WoodPlanks" | "Marble" | "Slate" | "Concrete" | "Granite" | "Brick" | "Pebble" | "Cobblestone" | "Rock" | "Sandstone" | "Basalt" | "CrackedLava" | "Limestone" | "Pavement" | "CorrodedMetal" | "DiamondPlate" | "Foil" | "Metal" | "Grass" | "LeafyGrass" | "Sand" | "Fabric" | "Snow" | "Mud" | "Ground" | "Asphalt" | "Salt" | "Ice" | "Glacier" | "Glass" | "ForceField" | "Air" | "Water" | "Cardboard" | "Carpet" | "CeramicTiles" | "ClayRoofTiles" | "RoofShingles" | "Leather" | "Plaster" | "Rubber"), Transparency: number } = ReadEVENT_CreatePuppet()
			if #Events.Reliable[5] > 0 then
				for _, Listener in Events.Reliable[5] do
					task.spawn(Listener, Value1, Value2)
				end
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"CreatePuppet\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Value1, Value2} :: {any})
			end
		elseif Index == 6 then
			local Value: {[string]: CFrame} = ReadEVENT_ReplicatePuppetStates()
			if #Events.Reliable[6] > 0 then
				for _, Listener in Events.Reliable[6] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"ReplicatePuppetStates\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	SignalDestruction = {
		On = function(Listener: (Value: { Shape: ("Ball" | "Block" | "Cylinder" | "Wedge" | "CornerWedge"), CFrame: CFrame, Size: Vector3, OverlapFilterType: ("Include" | "Exclude")?, OverlapFilterDescendants: { Instance }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, finalOpTick: number?, ID: string, OnVoxelDestruct: string?, DestructParameters: { any } }) -> ()): () -> ()
			table.insert(Events.Reliable[0], Listener)
			for Index, Arguments in Queue.Reliable[0] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				local Index = table.find(Events.Reliable[0], Listener)
				if Index ~= nil then
					table.remove(Events.Reliable[0], Index)
				end
			end
		end
	},
	SignalUndo = {
		On = function(Listener: (Value: string) -> ()): () -> ()
			table.insert(Events.Reliable[1], Listener)
			for Index, Arguments in Queue.Reliable[1] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				local Index = table.find(Events.Reliable[1], Listener)
				if Index ~= nil then
					table.remove(Events.Reliable[1], Index)
				end
			end
		end
	},
	SignalClearQueue = {
		On = function(Listener: (Value: nil) -> ()): () -> ()
			table.insert(Events.Reliable[2], Listener)
			for Index, Arguments in Queue.Reliable[2] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				local Index = table.find(Events.Reliable[2], Listener)
				if Index ~= nil then
					table.remove(Events.Reliable[2], Index)
				end
			end
		end
	},
	MapReplicationCompleted = {
		Fire = function(Value: string): ()
			WriteEVENT_MapReplicationCompleted(Value)
		end
	},
	UndoReplicationCompleted = {
		Fire = function(Value: nil): ()
			WriteEVENT_UndoReplicationCompleted(Value)
		end
	},
	CreatePuppet = {
		On = function(Listener: (Value1: string, Value2: { CFrame: CFrame, Size: Vector3, Material: ("Plastic" | "SmoothPlastic" | "Neon" | "Wood" | "WoodPlanks" | "Marble" | "Slate" | "Concrete" | "Granite" | "Brick" | "Pebble" | "Cobblestone" | "Rock" | "Sandstone" | "Basalt" | "CrackedLava" | "Limestone" | "Pavement" | "CorrodedMetal" | "DiamondPlate" | "Foil" | "Metal" | "Grass" | "LeafyGrass" | "Sand" | "Fabric" | "Snow" | "Mud" | "Ground" | "Asphalt" | "Salt" | "Ice" | "Glacier" | "Glass" | "ForceField" | "Air" | "Water" | "Cardboard" | "Carpet" | "CeramicTiles" | "ClayRoofTiles" | "RoofShingles" | "Leather" | "Plaster" | "Rubber"), Transparency: number }) -> ()): () -> ()
			table.insert(Events.Reliable[5], Listener)
			for Index, Arguments in Queue.Reliable[5] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[5] = {}
			return function (): ()
				local Index = table.find(Events.Reliable[5], Listener)
				if Index ~= nil then
					table.remove(Events.Reliable[5], Index)
				end
			end
		end
	},
	ReplicatePuppetStates = {
		On = function(Listener: (Value: {[string]: CFrame}) -> ()): () -> ()
			table.insert(Events.Reliable[6], Listener)
			for Index, Arguments in Queue.Reliable[6] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[6] = {}
			return function (): ()
				local Index = table.find(Events.Reliable[6], Listener)
				if Index ~= nil then
					table.remove(Events.Reliable[6], Index)
				end
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL