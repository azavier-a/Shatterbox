--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Events.Reliable[0] = {}
Queue.Reliable[0] = table.create(256)
Events.Reliable[1] = {}
Queue.Reliable[1] = table.create(256)
Events.Reliable[2] = {}
Queue.Reliable[2] = table.create(256)
Events.Reliable[3] = {}
Queue.Reliable[3] = table.create(256)
Events.Reliable[4] = {}
Queue.Reliable[4] = table.create(256)
Events.Reliable[5] = {}
Queue.Reliable[5] = table.create(256)
Events.Reliable[6] = {}
Queue.Reliable[6] = table.create(256)
Events.Reliable[7] = {}
Queue.Reliable[7] = table.create(256)
Events.Reliable[8] = {}
Queue.Reliable[8] = table.create(256)
export type Shatterbox_AttributesMap = {[string]: any}
export type Shatterbox_PartProperties = { Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } }
export type Shatterbox_Box = { CFrame: CFrame, Size: Vector3 }
export type Shatterbox_Hitbox = { CFrame: CFrame, Size: Vector3, Shape: number }
export type Shatterbox_PartInstance = { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } }
export type Shatterbox_Puppet = { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } }
export type Shatterbox_Dirtied = { OriginalPart: { CFrame: CFrame, Size: Vector3 }, Children: { { CFrame: CFrame, Size: Vector3 } }, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } }
export type Shatterbox_OpDirty = { ID: string, Dirties: { { OriginalPart: { CFrame: CFrame, Size: Vector3 }, Children: { { CFrame: CFrame, Size: Vector3 } }, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } }
export type Shatterbox_ImaginaryDestructionParamsType = { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number? }
export type Shatterbox_DestructionParamsType = { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, OnVoxelDestruct: string?, DestructParameters: { any } }
export type Shatterbox_PuppetState = { GUID: string, CFrame: CFrame }
local function Shatterbox_ReadEVENT_SignalUndo(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function Shatterbox_ReadEVENT_SignalClearQueue(): (nil)
	return nil
end

local function Shatterbox_ReadEVENT_SignalReset(): (nil)
	return nil
end

local function Shatterbox_ReadEVENT_CreatePuppets(): ({ { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 53 bytes
	local ARRAY_START_1 = Read(53 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		Item_1.GUID = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		-- Read 4
		local OPERATION_OFFSET_7 = ARRAY_START_1
		ARRAY_START_1 += 4
		X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
		-- Read 4
		local OPERATION_OFFSET_8 = ARRAY_START_1
		ARRAY_START_1 += 4
		Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
		-- Read 4
		local OPERATION_OFFSET_9 = ARRAY_START_1
		ARRAY_START_1 += 4
		Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_9)
		Item_1.Size = Vector3.new(X, Y, Z)
		-- Read 1
		local OPERATION_OFFSET_10 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_11 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_12 = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_12))
		-- Read 2
		local OPERATION_OFFSET_13 = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
		if Item_1.Material < 256 then error(`Expected "Item_1.Material" to be larger than 256, got {Item_1.Material} instead.`) end
		if Item_1.Material > 2311 then error(`Expected "Item_1.Material" to be smaller than 2311, got {Item_1.Material} instead.`) end
		-- Read 2
		local OPERATION_OFFSET_14 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_14)
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Item_1.Transparency = -math.huge
			else
				Item_1.Transparency = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Item_1.Transparency = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Item_1.Transparency = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Item_1.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
		end
		-- Read 1
		local OPERATION_OFFSET_15 = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_15) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			local MantissaExponent = Encoded % 0x8000
			if MantissaExponent == 0b0_11111_0000000000  then
				if Encoded // 0x8000 == 1 then
					Item_1.Reflectance = -math.huge
				else
					Item_1.Reflectance = math.huge
				end
			elseif MantissaExponent == 0b1_11111_0000000000   then
				Item_1.Reflectance = 0 / 0
			elseif MantissaExponent == 0b0_00000_0000000000   then
				Item_1.Reflectance = 0
			else
				local Mantissa = MantissaExponent % 0x400
				local Exponent = MantissaExponent // 0x400
				local Fraction;
				if Exponent == 0 then
					Fraction = Mantissa / 0x400
				else
					Fraction = Mantissa / 0x800 + 0.5
				end
				local Result = math.ldexp(Fraction, Exponent - 14)
				Item_1.Reflectance = if Encoded // 0x8000 == 1 then -Result else Result
			end
		end
		-- Read 1
		local OPERATION_OFFSET_16 = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_16) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			Item_1.MaterialVariant = buffer.readstring(RecieveBuffer, Read(Length), Length)
		end
		-- Read 2
		local OPERATION_OFFSET_17 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_17)
		Item_1.CollisionGroup = buffer.readstring(RecieveBuffer, Read(Length), Length)
		Item_1.Attributes = {}
		-- Read 2
		local OPERATION_OFFSET_18 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Elements_2 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_18)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(2)
			Length = buffer.readu16(RecieveBuffer, OFFSET_0)
			local Key_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			RecieveInstanceCursor += 1
			local Element_2 = RecieveInstances[RecieveInstanceCursor]
			Item_1.Attributes[Key_2] = Element_2
		end
		-- START ARRAY
		-- Read 2
		local OPERATION_OFFSET_19 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_19)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Item_1.Tags = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Item_1.Tags, Item_2)
		end
		-- END ARRAY
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

local function Shatterbox_ReadEVENT_ReplicatePuppetStates(): ({ { GUID: string, CFrame: CFrame } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 26 bytes
	local ARRAY_START_1 = Read(26 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		Item_1.GUID = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

local function Shatterbox_ReadEVENT_DestroyPuppet(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function Shatterbox_ReadEVENT_ReplicateMap(): ({ { ID: string, Dirties: { { OriginalPart: { CFrame: CFrame, Size: Vector3 }, Children: { { CFrame: CFrame, Size: Vector3 } }, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } } }, { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } })
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 4 bytes
	local ARRAY_START_1 = Read(4 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		Item_1.ID = buffer.readstring(RecieveBuffer, Read(Length), Length)
		-- START ARRAY
		-- Read 2
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_1)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Item_1.Dirties = table.create(Length)
			-- Read BLOCK: 53 bytes
		local ARRAY_START_2 = Read(53 * Length)
		for Index = 1, Length do
			local Item_2 = {} :: any
			Item_2.OriginalPart = {} :: any
			-- Read 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
			-- Read 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
			-- Read 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
			local Position = Vector3.new(X, Y, Z)
			-- Read 4
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 4
			local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
			-- Read 4
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 4
			local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
			-- Read 4
			local OPERATION_OFFSET_5 = ARRAY_START_2
			ARRAY_START_2 += 4
			local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
			Item_2.OriginalPart.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
			-- Read 4
			local OPERATION_OFFSET_6 = ARRAY_START_2
			ARRAY_START_2 += 4
			X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
			-- Read 4
			local OPERATION_OFFSET_7 = ARRAY_START_2
			ARRAY_START_2 += 4
			Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
			-- Read 4
			local OPERATION_OFFSET_8 = ARRAY_START_2
			ARRAY_START_2 += 4
			Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
			Item_2.OriginalPart.Size = Vector3.new(X, Y, Z)
			-- START ARRAY
			-- Read 2
			local OPERATION_OFFSET_9 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_9)
			if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
			if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
			Item_2.Children = table.create(Length)
				-- Read BLOCK: 36 bytes
			local ARRAY_START_3 = Read(36 * Length)
			for Index = 1, Length do
				local Item_3 = {} :: any
				-- Read 4
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 4
				X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
				-- Read 4
				local OPERATION_OFFSET_1 = ARRAY_START_3
				ARRAY_START_3 += 4
				Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
				-- Read 4
				local OPERATION_OFFSET_2 = ARRAY_START_3
				ARRAY_START_3 += 4
				Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
				Position = Vector3.new(X, Y, Z)
				-- Read 4
				local OPERATION_OFFSET_3 = ARRAY_START_3
				ARRAY_START_3 += 4
				rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
				-- Read 4
				local OPERATION_OFFSET_4 = ARRAY_START_3
				ARRAY_START_3 += 4
				rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
				-- Read 4
				local OPERATION_OFFSET_5 = ARRAY_START_3
				ARRAY_START_3 += 4
				rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
				Item_3.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
				-- Read 4
				local OPERATION_OFFSET_6 = ARRAY_START_3
				ARRAY_START_3 += 4
				X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
				-- Read 4
				local OPERATION_OFFSET_7 = ARRAY_START_3
				ARRAY_START_3 += 4
				Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
				-- Read 4
				local OPERATION_OFFSET_8 = ARRAY_START_3
				ARRAY_START_3 += 4
				Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
				Item_3.Size = Vector3.new(X, Y, Z)
				table.insert(Item_2.Children, Item_3)
			end
			-- END ARRAY
			-- Read 1
			local OPERATION_OFFSET_10 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_11 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_12 = ARRAY_START_2
			ARRAY_START_2 += 1
			Item_2.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_12))
			-- Read 2
			local OPERATION_OFFSET_13 = ARRAY_START_2
			ARRAY_START_2 += 2
			Item_2.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
			if Item_2.Material < 256 then error(`Expected "Item_2.Material" to be larger than 256, got {Item_2.Material} instead.`) end
			if Item_2.Material > 2311 then error(`Expected "Item_2.Material" to be smaller than 2311, got {Item_2.Material} instead.`) end
			-- Read 2
			local OPERATION_OFFSET_14 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_14)
			local MantissaExponent = Encoded % 0x8000
			if MantissaExponent == 0b0_11111_0000000000  then
				if Encoded // 0x8000 == 1 then
					Item_2.Transparency = -math.huge
				else
					Item_2.Transparency = math.huge
				end
			elseif MantissaExponent == 0b1_11111_0000000000   then
				Item_2.Transparency = 0 / 0
			elseif MantissaExponent == 0b0_00000_0000000000   then
				Item_2.Transparency = 0
			else
				local Mantissa = MantissaExponent % 0x400
				local Exponent = MantissaExponent // 0x400
				local Fraction;
				if Exponent == 0 then
					Fraction = Mantissa / 0x400
				else
					Fraction = Mantissa / 0x800 + 0.5
				end
				local Result = math.ldexp(Fraction, Exponent - 14)
				Item_2.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
			end
			-- Read 1
			local OPERATION_OFFSET_15 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_15) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				local MantissaExponent = Encoded % 0x8000
				if MantissaExponent == 0b0_11111_0000000000  then
					if Encoded // 0x8000 == 1 then
						Item_2.Reflectance = -math.huge
					else
						Item_2.Reflectance = math.huge
					end
				elseif MantissaExponent == 0b1_11111_0000000000   then
					Item_2.Reflectance = 0 / 0
				elseif MantissaExponent == 0b0_00000_0000000000   then
					Item_2.Reflectance = 0
				else
					local Mantissa = MantissaExponent % 0x400
					local Exponent = MantissaExponent // 0x400
					local Fraction;
					if Exponent == 0 then
						Fraction = Mantissa / 0x400
					else
						Fraction = Mantissa / 0x800 + 0.5
					end
					local Result = math.ldexp(Fraction, Exponent - 14)
					Item_2.Reflectance = if Encoded // 0x8000 == 1 then -Result else Result
				end
			end
			-- Read 1
			local OPERATION_OFFSET_16 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_16) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				Item_2.MaterialVariant = buffer.readstring(RecieveBuffer, Read(Length), Length)
			end
			-- Read 2
			local OPERATION_OFFSET_17 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_17)
			Item_2.CollisionGroup = buffer.readstring(RecieveBuffer, Read(Length), Length)
			Item_2.Attributes = {}
			-- Read 2
			local OPERATION_OFFSET_18 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Elements_3 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_18)
			for _ = 1, Elements_3 do
				local OFFSET_0 = Read(2)
				Length = buffer.readu16(RecieveBuffer, OFFSET_0)
				local Key_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				RecieveInstanceCursor += 1
				local Element_3 = RecieveInstances[RecieveInstanceCursor]
				Item_2.Attributes[Key_3] = Element_3
			end
			-- START ARRAY
			-- Read 2
			local OPERATION_OFFSET_19 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_19)
			if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
			if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
			Item_2.Tags = table.create(Length)
				-- Read BLOCK: 2 bytes
			local ARRAY_START_3 = Read(2 * Length)
			for Index = 1, Length do
				-- Read 2
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 2
				Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
				local Item_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				table.insert(Item_2.Tags, Item_3)
			end
			-- END ARRAY
			table.insert(Item_1.Dirties, Item_2)
		end
		-- END ARRAY
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value2 = table.create(Length)
		-- Read BLOCK: 51 bytes
	local ARRAY_START_1 = Read(51 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 4
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
		-- Read 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
		-- Read 4
		local OPERATION_OFFSET_2 = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET_3 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
		-- Read 4
		local OPERATION_OFFSET_4 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
		-- Read 4
		local OPERATION_OFFSET_5 = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
		Item_1.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		-- Read 4
		local OPERATION_OFFSET_6 = ARRAY_START_1
		ARRAY_START_1 += 4
		X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
		-- Read 4
		local OPERATION_OFFSET_7 = ARRAY_START_1
		ARRAY_START_1 += 4
		Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
		-- Read 4
		local OPERATION_OFFSET_8 = ARRAY_START_1
		ARRAY_START_1 += 4
		Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
		Item_1.Size = Vector3.new(X, Y, Z)
		-- Read 1
		local OPERATION_OFFSET_9 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_10 = ARRAY_START_1
		ARRAY_START_1 += 1
		-- Read 1
		local OPERATION_OFFSET_11 = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_9), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11))
		-- Read 2
		local OPERATION_OFFSET_12 = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_12)
		if Item_1.Material < 256 then error(`Expected "Item_1.Material" to be larger than 256, got {Item_1.Material} instead.`) end
		if Item_1.Material > 2311 then error(`Expected "Item_1.Material" to be smaller than 2311, got {Item_1.Material} instead.`) end
		-- Read 2
		local OPERATION_OFFSET_13 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Item_1.Transparency = -math.huge
			else
				Item_1.Transparency = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Item_1.Transparency = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Item_1.Transparency = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Item_1.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
		end
		-- Read 1
		local OPERATION_OFFSET_14 = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_14) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			local MantissaExponent = Encoded % 0x8000
			if MantissaExponent == 0b0_11111_0000000000  then
				if Encoded // 0x8000 == 1 then
					Item_1.Reflectance = -math.huge
				else
					Item_1.Reflectance = math.huge
				end
			elseif MantissaExponent == 0b1_11111_0000000000   then
				Item_1.Reflectance = 0 / 0
			elseif MantissaExponent == 0b0_00000_0000000000   then
				Item_1.Reflectance = 0
			else
				local Mantissa = MantissaExponent % 0x400
				local Exponent = MantissaExponent // 0x400
				local Fraction;
				if Exponent == 0 then
					Fraction = Mantissa / 0x400
				else
					Fraction = Mantissa / 0x800 + 0.5
				end
				local Result = math.ldexp(Fraction, Exponent - 14)
				Item_1.Reflectance = if Encoded // 0x8000 == 1 then -Result else Result
			end
		end
		-- Read 1
		local OPERATION_OFFSET_15 = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_15) == 1 then
			-- Read BLOCK: 2 bytes
			local BLOCK_START = Read(2)
			Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			Item_1.MaterialVariant = buffer.readstring(RecieveBuffer, Read(Length), Length)
		end
		-- Read 2
		local OPERATION_OFFSET_16 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_16)
		Item_1.CollisionGroup = buffer.readstring(RecieveBuffer, Read(Length), Length)
		Item_1.Attributes = {}
		-- Read 2
		local OPERATION_OFFSET_17 = ARRAY_START_1
		ARRAY_START_1 += 2
		local Elements_2 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_17)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(2)
			Length = buffer.readu16(RecieveBuffer, OFFSET_0)
			local Key_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			RecieveInstanceCursor += 1
			local Element_2 = RecieveInstances[RecieveInstanceCursor]
			Item_1.Attributes[Key_2] = Element_2
		end
		-- START ARRAY
		-- Read 2
		local OPERATION_OFFSET_18 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_18)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Item_1.Tags = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Item_1.Tags, Item_2)
		end
		-- END ARRAY
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	return Value1, Value2
end

local function Shatterbox_ReadEVENT_ReplicateDestruction(): ({ ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, OnVoxelDestruct: string?, DestructParameters: { any } }, { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }?)
	-- Read BLOCK: 47 bytes
	local BLOCK_START = Read(47)
	local Value1 = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value1.ID = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value1.CuttingPart = {} :: any
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 2)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 6)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 10)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 14)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 18)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 22)
	Value1.CuttingPart.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 26)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 30)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 34)
	Value1.CuttingPart.Size = Vector3.new(X, Y, Z)
	Value1.CuttingPart.Shape = buffer.readu8(RecieveBuffer, BLOCK_START + 38)
	if Value1.CuttingPart.Shape < 0 then error(`Expected "Value1.CuttingPart.Shape" to be larger than 0, got {Value1.CuttingPart.Shape} instead.`) end
	if Value1.CuttingPart.Shape > 4 then error(`Expected "Value1.CuttingPart.Shape" to be smaller than 4, got {Value1.CuttingPart.Shape} instead.`) end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 39) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value1.FilterTagged = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value1.FilterTagged, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 40) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value1.GridSize = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 41) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value1.CleanupDelay = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 42) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		Value1.SkipEncapsulatedVoxels = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 43) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value1.OnVoxelDestruct = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	-- START ARRAY
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 44)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value1.DestructParameters = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		table.insert(Value1.DestructParameters, Item_1)
	end
	-- END ARRAY
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 46) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value2 = table.create(Length)
			-- Read BLOCK: 51 bytes
		local ARRAY_START_2 = Read(51 * Length)
		for Index = 1, Length do
			local Item_2 = {} :: any
			-- Read 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
			-- Read 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
			-- Read 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
			Position = Vector3.new(X, Y, Z)
			-- Read 4
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 4
			rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
			-- Read 4
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 4
			rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
			-- Read 4
			local OPERATION_OFFSET_5 = ARRAY_START_2
			ARRAY_START_2 += 4
			rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
			Item_2.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
			-- Read 4
			local OPERATION_OFFSET_6 = ARRAY_START_2
			ARRAY_START_2 += 4
			X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
			-- Read 4
			local OPERATION_OFFSET_7 = ARRAY_START_2
			ARRAY_START_2 += 4
			Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
			-- Read 4
			local OPERATION_OFFSET_8 = ARRAY_START_2
			ARRAY_START_2 += 4
			Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
			Item_2.Size = Vector3.new(X, Y, Z)
			-- Read 1
			local OPERATION_OFFSET_9 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_10 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_11 = ARRAY_START_2
			ARRAY_START_2 += 1
			Item_2.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_9), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11))
			-- Read 2
			local OPERATION_OFFSET_12 = ARRAY_START_2
			ARRAY_START_2 += 2
			Item_2.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_12)
			if Item_2.Material < 256 then error(`Expected "Item_2.Material" to be larger than 256, got {Item_2.Material} instead.`) end
			if Item_2.Material > 2311 then error(`Expected "Item_2.Material" to be smaller than 2311, got {Item_2.Material} instead.`) end
			-- Read 2
			local OPERATION_OFFSET_13 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
			local MantissaExponent = Encoded % 0x8000
			if MantissaExponent == 0b0_11111_0000000000  then
				if Encoded // 0x8000 == 1 then
					Item_2.Transparency = -math.huge
				else
					Item_2.Transparency = math.huge
				end
			elseif MantissaExponent == 0b1_11111_0000000000   then
				Item_2.Transparency = 0 / 0
			elseif MantissaExponent == 0b0_00000_0000000000   then
				Item_2.Transparency = 0
			else
				local Mantissa = MantissaExponent % 0x400
				local Exponent = MantissaExponent // 0x400
				local Fraction;
				if Exponent == 0 then
					Fraction = Mantissa / 0x400
				else
					Fraction = Mantissa / 0x800 + 0.5
				end
				local Result = math.ldexp(Fraction, Exponent - 14)
				Item_2.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
			end
			-- Read 1
			local OPERATION_OFFSET_14 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_14) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				local MantissaExponent = Encoded % 0x8000
				if MantissaExponent == 0b0_11111_0000000000  then
					if Encoded // 0x8000 == 1 then
						Item_2.Reflectance = -math.huge
					else
						Item_2.Reflectance = math.huge
					end
				elseif MantissaExponent == 0b1_11111_0000000000   then
					Item_2.Reflectance = 0 / 0
				elseif MantissaExponent == 0b0_00000_0000000000   then
					Item_2.Reflectance = 0
				else
					local Mantissa = MantissaExponent % 0x400
					local Exponent = MantissaExponent // 0x400
					local Fraction;
					if Exponent == 0 then
						Fraction = Mantissa / 0x400
					else
						Fraction = Mantissa / 0x800 + 0.5
					end
					local Result = math.ldexp(Fraction, Exponent - 14)
					Item_2.Reflectance = if Encoded // 0x8000 == 1 then -Result else Result
				end
			end
			-- Read 1
			local OPERATION_OFFSET_15 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_15) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				Item_2.MaterialVariant = buffer.readstring(RecieveBuffer, Read(Length), Length)
			end
			-- Read 2
			local OPERATION_OFFSET_16 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_16)
			Item_2.CollisionGroup = buffer.readstring(RecieveBuffer, Read(Length), Length)
			Item_2.Attributes = {}
			-- Read 2
			local OPERATION_OFFSET_17 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Elements_3 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_17)
			for _ = 1, Elements_3 do
				local OFFSET_0 = Read(2)
				Length = buffer.readu16(RecieveBuffer, OFFSET_0)
				local Key_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				RecieveInstanceCursor += 1
				local Element_3 = RecieveInstances[RecieveInstanceCursor]
				Item_2.Attributes[Key_3] = Element_3
			end
			-- START ARRAY
			-- Read 2
			local OPERATION_OFFSET_18 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_18)
			if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
			if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
			Item_2.Tags = table.create(Length)
				-- Read BLOCK: 2 bytes
			local ARRAY_START_3 = Read(2 * Length)
			for Index = 1, Length do
				-- Read 2
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 2
				Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
				local Item_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				table.insert(Item_2.Tags, Item_3)
			end
			-- END ARRAY
			table.insert(Value2, Item_2)
		end
		-- END ARRAY
	end
	return Value1, Value2
end

local function Shatterbox_ReadEVENT_ReplicateImaginary(): ({ ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number? }, { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }?)
	-- Read BLOCK: 43 bytes
	local BLOCK_START = Read(43)
	local Value1 = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value1.ID = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value1.CuttingPart = {} :: any
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 2)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 6)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 10)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 14)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 18)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 22)
	Value1.CuttingPart.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 26)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 30)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 34)
	Value1.CuttingPart.Size = Vector3.new(X, Y, Z)
	Value1.CuttingPart.Shape = buffer.readu8(RecieveBuffer, BLOCK_START + 38)
	if Value1.CuttingPart.Shape < 0 then error(`Expected "Value1.CuttingPart.Shape" to be larger than 0, got {Value1.CuttingPart.Shape} instead.`) end
	if Value1.CuttingPart.Shape > 4 then error(`Expected "Value1.CuttingPart.Shape" to be smaller than 4, got {Value1.CuttingPart.Shape} instead.`) end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 39) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value1.FilterTagged = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value1.FilterTagged, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 40) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value1.GridSize = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 41) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value1.CleanupDelay = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	end
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 42) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value2 = table.create(Length)
			-- Read BLOCK: 51 bytes
		local ARRAY_START_2 = Read(51 * Length)
		for Index = 1, Length do
			local Item_2 = {} :: any
			-- Read 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_0)
			-- Read 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_1)
			-- Read 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_2)
			Position = Vector3.new(X, Y, Z)
			-- Read 4
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 4
			rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_3)
			-- Read 4
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 4
			rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_4)
			-- Read 4
			local OPERATION_OFFSET_5 = ARRAY_START_2
			ARRAY_START_2 += 4
			rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_5)
			Item_2.CFrame = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
			-- Read 4
			local OPERATION_OFFSET_6 = ARRAY_START_2
			ARRAY_START_2 += 4
			X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_6)
			-- Read 4
			local OPERATION_OFFSET_7 = ARRAY_START_2
			ARRAY_START_2 += 4
			Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_7)
			-- Read 4
			local OPERATION_OFFSET_8 = ARRAY_START_2
			ARRAY_START_2 += 4
			Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET_8)
			Item_2.Size = Vector3.new(X, Y, Z)
			-- Read 1
			local OPERATION_OFFSET_9 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_10 = ARRAY_START_2
			ARRAY_START_2 += 1
			-- Read 1
			local OPERATION_OFFSET_11 = ARRAY_START_2
			ARRAY_START_2 += 1
			Item_2.Color = Color3.fromRGB(buffer.readu8(RecieveBuffer, OPERATION_OFFSET_9), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_10), buffer.readu8(RecieveBuffer, OPERATION_OFFSET_11))
			-- Read 2
			local OPERATION_OFFSET_12 = ARRAY_START_2
			ARRAY_START_2 += 2
			Item_2.Material = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_12)
			if Item_2.Material < 256 then error(`Expected "Item_2.Material" to be larger than 256, got {Item_2.Material} instead.`) end
			if Item_2.Material > 2311 then error(`Expected "Item_2.Material" to be smaller than 2311, got {Item_2.Material} instead.`) end
			-- Read 2
			local OPERATION_OFFSET_13 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Encoded = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_13)
			local MantissaExponent = Encoded % 0x8000
			if MantissaExponent == 0b0_11111_0000000000  then
				if Encoded // 0x8000 == 1 then
					Item_2.Transparency = -math.huge
				else
					Item_2.Transparency = math.huge
				end
			elseif MantissaExponent == 0b1_11111_0000000000   then
				Item_2.Transparency = 0 / 0
			elseif MantissaExponent == 0b0_00000_0000000000   then
				Item_2.Transparency = 0
			else
				local Mantissa = MantissaExponent % 0x400
				local Exponent = MantissaExponent // 0x400
				local Fraction;
				if Exponent == 0 then
					Fraction = Mantissa / 0x400
				else
					Fraction = Mantissa / 0x800 + 0.5
				end
				local Result = math.ldexp(Fraction, Exponent - 14)
				Item_2.Transparency = if Encoded // 0x8000 == 1 then -Result else Result
			end
			-- Read 1
			local OPERATION_OFFSET_14 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_14) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				local MantissaExponent = Encoded % 0x8000
				if MantissaExponent == 0b0_11111_0000000000  then
					if Encoded // 0x8000 == 1 then
						Item_2.Reflectance = -math.huge
					else
						Item_2.Reflectance = math.huge
					end
				elseif MantissaExponent == 0b1_11111_0000000000   then
					Item_2.Reflectance = 0 / 0
				elseif MantissaExponent == 0b0_00000_0000000000   then
					Item_2.Reflectance = 0
				else
					local Mantissa = MantissaExponent % 0x400
					local Exponent = MantissaExponent // 0x400
					local Fraction;
					if Exponent == 0 then
						Fraction = Mantissa / 0x400
					else
						Fraction = Mantissa / 0x800 + 0.5
					end
					local Result = math.ldexp(Fraction, Exponent - 14)
					Item_2.Reflectance = if Encoded // 0x8000 == 1 then -Result else Result
				end
			end
			-- Read 1
			local OPERATION_OFFSET_15 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_15) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
				Item_2.MaterialVariant = buffer.readstring(RecieveBuffer, Read(Length), Length)
			end
			-- Read 2
			local OPERATION_OFFSET_16 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_16)
			Item_2.CollisionGroup = buffer.readstring(RecieveBuffer, Read(Length), Length)
			Item_2.Attributes = {}
			-- Read 2
			local OPERATION_OFFSET_17 = ARRAY_START_2
			ARRAY_START_2 += 2
			local Elements_3 = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_17)
			for _ = 1, Elements_3 do
				local OFFSET_0 = Read(2)
				Length = buffer.readu16(RecieveBuffer, OFFSET_0)
				local Key_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				RecieveInstanceCursor += 1
				local Element_3 = RecieveInstances[RecieveInstanceCursor]
				Item_2.Attributes[Key_3] = Element_3
			end
			-- START ARRAY
			-- Read 2
			local OPERATION_OFFSET_18 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_18)
			if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
			if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
			Item_2.Tags = table.create(Length)
				-- Read BLOCK: 2 bytes
			local ARRAY_START_3 = Read(2 * Length)
			for Index = 1, Length do
				-- Read 2
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 2
				Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
				local Item_3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
				table.insert(Item_2.Tags, Item_3)
			end
			-- END ARRAY
			table.insert(Value2, Item_2)
		end
		-- END ARRAY
	end
	return Value1, Value2
end

local function Shatterbox_WriteEVENT_ClientInitComplete(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 9)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Shatterbox = {
		SignalUndo = {
			On = NOOP
		},
		SignalClearQueue = {
			On = NOOP
		},
		SignalReset = {
			On = NOOP
		},
		CreatePuppets = {
			On = NOOP
		},
		ReplicatePuppetStates = {
			On = NOOP
		},
		DestroyPuppet = {
			On = NOOP
		},
		ReplicateMap = {
			On = NOOP
		},
		ReplicateDestruction = {
			On = NOOP
		},
		ReplicateImaginary = {
			On = NOOP
		},
		ClientInitComplete = {
			Fire = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: string = Shatterbox_ReadEVENT_SignalUndo()
			if #Events.Reliable[0] > 0 then
				for _, Listener in Events.Reliable[0] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"SignalUndo\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: nil = Shatterbox_ReadEVENT_SignalClearQueue()
			if #Events.Reliable[1] > 0 then
				for _, Listener in Events.Reliable[1] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"SignalClearQueue\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: nil = Shatterbox_ReadEVENT_SignalReset()
			if #Events.Reliable[2] > 0 then
				for _, Listener in Events.Reliable[2] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"SignalReset\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 3 then
			local Value: { { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } = Shatterbox_ReadEVENT_CreatePuppets()
			if #Events.Reliable[3] > 0 then
				for _, Listener in Events.Reliable[3] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"CreatePuppets\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value} :: {any})
			end
		elseif Index == 4 then
			local Value: { { GUID: string, CFrame: CFrame } } = Shatterbox_ReadEVENT_ReplicatePuppetStates()
			if #Events.Reliable[4] > 0 then
				for _, Listener in Events.Reliable[4] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"ReplicatePuppetStates\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Value} :: {any})
			end
		elseif Index == 5 then
			local Value: string = Shatterbox_ReadEVENT_DestroyPuppet()
			if #Events.Reliable[5] > 0 then
				for _, Listener in Events.Reliable[5] do
					task.spawn(Listener, Value)
				end
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"DestroyPuppet\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Value} :: {any})
			end
		elseif Index == 6 then
			local Value1: { { ID: string, Dirties: { { OriginalPart: { CFrame: CFrame, Size: Vector3 }, Children: { { CFrame: CFrame, Size: Vector3 } }, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } } }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } = Shatterbox_ReadEVENT_ReplicateMap()
			if #Events.Reliable[6] > 0 then
				for _, Listener in Events.Reliable[6] do
					task.spawn(Listener, Value1, Value2)
				end
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"ReplicateMap\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Value1, Value2} :: {any})
			end
		elseif Index == 7 then
			local Value1: { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, OnVoxelDestruct: string?, DestructParameters: { any } }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }? = Shatterbox_ReadEVENT_ReplicateDestruction()
			if #Events.Reliable[7] > 0 then
				for _, Listener in Events.Reliable[7] do
					task.spawn(Listener, Value1, Value2)
				end
			else
				if #Queue.Reliable[7] > 256 then
					warn("[Blink]: Event queue of \"ReplicateDestruction\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[7], {Value1, Value2} :: {any})
			end
		elseif Index == 8 then
			local Value1: { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number? }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }? = Shatterbox_ReadEVENT_ReplicateImaginary()
			if #Events.Reliable[8] > 0 then
				for _, Listener in Events.Reliable[8] do
					task.spawn(Listener, Value1, Value2)
				end
			else
				if #Queue.Reliable[8] > 256 then
					warn("[Blink]: Event queue of \"ReplicateImaginary\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[8], {Value1, Value2} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Shatterbox = {
		SignalUndo = {
			On = function(Listener: (Value: string) -> ()): () -> ()
				table.insert(Events.Reliable[0], Listener)
				for Index, Arguments in Queue.Reliable[0] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[0], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[0], Index)
					end
				end
			end
		},
		SignalClearQueue = {
			On = function(Listener: (Value: nil) -> ()): () -> ()
				table.insert(Events.Reliable[1], Listener)
				for Index, Arguments in Queue.Reliable[1] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[1] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[1], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[1], Index)
					end
				end
			end
		},
		SignalReset = {
			On = function(Listener: (Value: nil) -> ()): () -> ()
				table.insert(Events.Reliable[2], Listener)
				for Index, Arguments in Queue.Reliable[2] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[2] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[2], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[2], Index)
					end
				end
			end
		},
		CreatePuppets = {
			On = function(Listener: (Value: { { GUID: string, CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }) -> ()): () -> ()
				table.insert(Events.Reliable[3], Listener)
				for Index, Arguments in Queue.Reliable[3] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[3] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[3], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[3], Index)
					end
				end
			end
		},
		ReplicatePuppetStates = {
			On = function(Listener: (Value: { { GUID: string, CFrame: CFrame } }) -> ()): () -> ()
				table.insert(Events.Reliable[4], Listener)
				for Index, Arguments in Queue.Reliable[4] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[4] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[4], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[4], Index)
					end
				end
			end
		},
		DestroyPuppet = {
			On = function(Listener: (Value: string) -> ()): () -> ()
				table.insert(Events.Reliable[5], Listener)
				for Index, Arguments in Queue.Reliable[5] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[5] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[5], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[5], Index)
					end
				end
			end
		},
		ReplicateMap = {
			On = function(Listener: (Value1: { { ID: string, Dirties: { { OriginalPart: { CFrame: CFrame, Size: Vector3 }, Children: { { CFrame: CFrame, Size: Vector3 } }, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } } } }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }) -> ()): () -> ()
				table.insert(Events.Reliable[6], Listener)
				for Index, Arguments in Queue.Reliable[6] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[6] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[6], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[6], Index)
					end
				end
			end
		},
		ReplicateDestruction = {
			On = function(Listener: (Value1: { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number?, SkipEncapsulatedVoxels: boolean?, OnVoxelDestruct: string?, DestructParameters: { any } }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }?) -> ()): () -> ()
				table.insert(Events.Reliable[7], Listener)
				for Index, Arguments in Queue.Reliable[7] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[7] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[7], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[7], Index)
					end
				end
			end
		},
		ReplicateImaginary = {
			On = function(Listener: (Value1: { ID: string, CuttingPart: { CFrame: CFrame, Size: Vector3, Shape: number }, FilterTagged: { string }?, GridSize: number?, CleanupDelay: number? }, Value2: { { CFrame: CFrame, Size: Vector3, Color: Color3, Material: number, Transparency: number, Reflectance: number?, MaterialVariant: string?, CollisionGroup: string, Attributes: {[string]: any}, Tags: { string } } }?) -> ()): () -> ()
				table.insert(Events.Reliable[8], Listener)
				for Index, Arguments in Queue.Reliable[8] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[8] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[8], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[8], Index)
					end
				end
			end
		},
		ClientInitComplete = {
			Fire = function(Value: nil): ()
				Shatterbox_WriteEVENT_ClientInitComplete(Value)
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL