map AttributesMap = { [string]: unknown }

struct PartProperties {
	Color : Color3,
	Material : u16(256..2311),
	Transparency : f16,
	Reflectance : f16?,
	MaterialVariant : string?,
	CollisionGroup : string,

	Attributes : AttributesMap,
	Tags : string[]
}

struct Box {
	CFrame : CFrame,
	Size : vector
}

struct Hitbox {
	..Box,

	Shape : u8(0..4)
}

struct PartInstance {
	..Box,

	..PartProperties
}

struct Puppet {
	GUID : string,

	..Box,

	..PartProperties
}

struct Dirtied {
	OriginalPart : Box,
	Children : Box[],

	..PartProperties
}

struct OpDirty {
	ID : string,
	Dirties : Dirtied[]
}

struct ImaginaryDestructionParamsType {
	ID : string,

	CuttingPart : Hitbox,
	
	FilterTagged : string[]?,
	GridSize : f32?,
	CleanupDelay : f32?
}

struct DestructionParamsType {
	
	..ImaginaryDestructionParamsType,
	
	SkipEncapsulatedVoxels : boolean?,

	OnVoxelDestruct : string?,
	DestructParameters : unknown[]
}

struct PuppetState {
	GUID : string,
	CFrame : CFrame 
}



event SignalUndo {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: string
}

event SignalClearQueue {
	From: Server,
	Type: Reliable,
	Call: ManyAsync
}

event SignalReset {
	From: Server,
	Type: Reliable,
	Call: ManyAsync
}




event CreatePuppets {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: Puppet[]
}

event ReplicatePuppetStates {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: PuppetState[]
}

event DestroyPuppet {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: string
}



event ReplicateMap {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: (OpDirty[], PartInstance[])
}

event ReplicateDestruction {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: (DestructionParamsType, PartInstance[]?)
}

event ReplicateImaginary {
	From: Server,
	Type: Reliable,
	Call: ManyAsync,
	Data: (ImaginaryDestructionParamsType, PartInstance[]?)
}



event ClientInitComplete {
	From: Client,
	Type: Reliable,
	Call: SingleAsync
}